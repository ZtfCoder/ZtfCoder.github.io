import{_ as n,c as e,G as t,a2 as p,j as a,B as l,o as h}from"./chunks/framework.sGs2IBkb.js";const b=JSON.parse('{"title":"09-内置对象扩展：Set数据结构","description":"","frontmatter":{"title":"09-内置对象扩展：Set数据结构","publish":true},"headers":[],"relativePath":"hxg/05-JavaScript基础：ES6语法/09-内置对象扩展：Set数据结构.md","filePath":"hxg/05-JavaScript基础：ES6语法/09-内置对象扩展：Set数据结构.md","lastUpdated":1725860495000}'),r={name:"hxg/05-JavaScript基础：ES6语法/09-内置对象扩展：Set数据结构.md"};function k(o,s,d,c,g,u){const i=l("ArticleTopAd");return h(),e("div",null,[t(i),s[0]||(s[0]=p(`<h2 id="set-数据结构" tabindex="-1">Set 数据结构 <a class="header-anchor" href="#set-数据结构" aria-label="Permalink to &quot;Set 数据结构&quot;">​</a></h2><h3 id="set-数据结构的介绍" tabindex="-1">Set 数据结构的介绍 <a class="header-anchor" href="#set-数据结构的介绍" aria-label="Permalink to &quot;Set 数据结构的介绍&quot;">​</a></h3><p>ES6 提供了 新的数据结构 Set。Set 类似于<strong>数组</strong>，但成员的值都是<strong>唯一</strong>的，没有重复的值。</p><p>Set 的应用有很多。比如，在 H5 页面的搜索功能里，用户可能会多次搜索重复的关键字；但是在数据存储上，不需要存储重复的关键字。此时，我们就可以用 Set 来存储用户的搜索记录，Set 内部会自动判断值是否重复，如果重复，则不会进行存储，十分方便。</p><h3 id="生成-set-数据结构" tabindex="-1">生成 Set 数据结构 <a class="header-anchor" href="#生成-set-数据结构" aria-label="Permalink to &quot;生成 Set 数据结构&quot;">​</a></h3><p>Set 本身就是一个构造函数，可通过 <code>new Set()</code> 生成一个 Set 的实例。</p><p>举例 1：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set1.size); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印结果：0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>举例 2</strong>、可以接收一个<strong>数组</strong>作为参数，实现<strong>数组去重</strong>：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;王五&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意，这个数组里有重复的值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意，这里的 set2 并不是数组，而是一个单纯的 Set 数据结构</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过扩展运算符，拿到 set 中的元素（用逗号分隔的序列）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...set2 //  &quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意，到这一步，才获取到了真正的数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set2]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>注意上方的第一行代码，虽然参数里传递的是数组结构，但拿到的 <code>set2</code> 不是数组结构，而是 Set 结构，而且里面元素是去重了的。通过 <code>[...set2]</code>就可以拿到<code>set2</code>对应的数组。</p><h2 id="我的公众号" tabindex="-1">我的公众号 <a class="header-anchor" href="#我的公众号" aria-label="Permalink to &quot;我的公众号&quot;">​</a></h2><p>想学习<strong>更多技能</strong>？不妨关注我的微信公众号：<strong>千古壹号</strong>。</p><p>扫一扫，你将发现另一个全新的世界，而这将是一场美丽的意外：</p>`,14)),s[1]||(s[1]=a("p",null,[a("img",{src:"https://img.smyhvae.com/20200102.png",alt:"",onclick:"previewImage('https://img.smyhvae.com/20200102.png')"})],-1))])}const m=n(r,[["render",k]]);export{b as __pageData,m as default};

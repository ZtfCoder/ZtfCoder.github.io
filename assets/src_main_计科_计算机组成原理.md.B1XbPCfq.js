import{_ as a,c as e,o,a5 as t}from"./chunks/framework.DP4ksDbn.js";const s="/assets/image-20220901222619084.C69itxMW.png",c="/assets/image-20220909131025731.BnjJughX.png",r="/assets/image-20220909132336213.BdbqBQ8t.png",i="/assets/image-20220909161754219.BwQfyL_Q.png",d="/assets/image-20220909211433161.CkCLtSuV.png",p="/assets/image-20220909212047224.Dg7UgiAh.png",n="/assets/image-20220909214411996.DGn_sSYO.png",l="/assets/image-20220913095050877.DmOYs-zp.png",h="/assets/image-20220913214001249.CDHYbasB.png",C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/main/计科/计算机组成原理.md","filePath":"src/main/计科/计算机组成原理.md","lastUpdated":1701252050000}'),m={name:"src/main/计科/计算机组成原理.md"},g=t('<p>计算机系统是由<strong>硬件</strong>,<strong>软件</strong> 构成的</p><h3 id="低电平和高电平" tabindex="-1">低电平和高电平 <a class="header-anchor" href="#低电平和高电平" aria-label="Permalink to &quot;低电平和高电平&quot;">​</a></h3><p>在数字电路中,我们通常把 <code>0-0.25V</code> 称为低电平</p><p><code>3.5-5V</code>称为高电平,</p><p>电子电路中,是通过电信号来传递的,<code>0为低电平</code>,<code>1为高电平</code></p><h3 id="第一台电子数字计算机" tabindex="-1">第一台电子数字计算机 <a class="header-anchor" href="#第一台电子数字计算机" aria-label="Permalink to &quot;第一台电子数字计算机&quot;">​</a></h3><p>ENIAC (1946)</p><p>其逻辑元件为 <strong>电子管</strong></p><p><img src="'+s+'" alt="image-20220901222619084"></p><h3 id="存储程序" tabindex="-1">存储程序 <a class="header-anchor" href="#存储程序" aria-label="Permalink to &quot;存储程序&quot;">​</a></h3><p>将指令以二进制的形式事先输入到计算机的主存储器里,然后按照存储器的的首地址执行第一条指令,之后,依次按照顺序执行其他指令,直到程序执行结束</p><h3 id="原码表示方法" tabindex="-1">原码表示方法 <a class="header-anchor" href="#原码表示方法" aria-label="Permalink to &quot;原码表示方法&quot;">​</a></h3><h4 id="整数" tabindex="-1">整数 <a class="header-anchor" href="#整数" aria-label="Permalink to &quot;整数&quot;">​</a></h4><p><img src="'+c+'" alt="image-20220909131025731"></p><p>如真值 <code>x=+1110</code> 则 原码为 <code>0,1110</code></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>逗号是为了把符号位和数值分隔开,原码的第一位为符号位</p></div><p>如真值为<code>x=-1110</code> 则原码为 <code>2^4 +1110=1000+1110=1,1110</code></p><h4 id="小数" tabindex="-1">小数 <a class="header-anchor" href="#小数" aria-label="Permalink to &quot;小数&quot;">​</a></h4><p><img src="'+r+'" alt="image-20220909132336213"></p><p>如<code>x=+0.1101</code> 原码则是<code>0.1101</code></p><p>原码第一位为符号位</p><p><code>x=-0.1101</code> 原码则是<code>1-(-0.1101)=1.1101</code></p><p>1 代表符号位,为负数</p><h3 id="补码表示法" tabindex="-1">补码表示法 <a class="header-anchor" href="#补码表示法" aria-label="Permalink to &quot;补码表示法&quot;">​</a></h3><ul><li>一个负数加上 “模” 即得该负数的补数</li><li>两个互为补数的数 它们绝对值之和即为 模 数</li></ul><h4 id="整数-1" tabindex="-1">整数 <a class="header-anchor" href="#整数-1" aria-label="Permalink to &quot;整数&quot;">​</a></h4><p><img src="'+i+'" alt="image-20220909161754219"></p><p>如 <code>x=+1010</code> 则补码为 <code>0,1010</code></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>逗号是为了把符号位和数值分隔开,补码的第一位为符号位</p></div><p><strong>当真值为负时,补码=原码除符号位,求反,末尾+1</strong></p><p><strong>当真值为负时,原码=补码除符号位,求反,末尾+1</strong></p><h4 id="小数-1" tabindex="-1">小数 <a class="header-anchor" href="#小数-1" aria-label="Permalink to &quot;小数&quot;">​</a></h4><p><img src="'+d+'" alt="image-20220909211433161"></p><p><strong>当真值为负时,补码=原码除符号位,求反,末尾+1</strong></p><p><strong>当真值为负时,原码=补码除符号位,求反,末尾+1</strong></p><h3 id="反码表示法" tabindex="-1">反码表示法 <a class="header-anchor" href="#反码表示法" aria-label="Permalink to &quot;反码表示法&quot;">​</a></h3><h4 id="整数-2" tabindex="-1">整数 <a class="header-anchor" href="#整数-2" aria-label="Permalink to &quot;整数&quot;">​</a></h4><p><img src="'+p+'" alt="image-20220909212047224"></p><h4 id="小数-2" tabindex="-1">小数 <a class="header-anchor" href="#小数-2" aria-label="Permalink to &quot;小数&quot;">​</a></h4><p><img src="'+n+'" alt="image-20220909214411996"></p><h3 id="移码表示法" tabindex="-1">移码表示法 <a class="header-anchor" href="#移码表示法" aria-label="Permalink to &quot;移码表示法&quot;">​</a></h3><p>补码很难直接判断值得大小</p><p>所以采用偏移量,将真值 偏移 2^n 次方 ( n 代表 整数位数)</p><p><img src="'+l+'" alt="image-20220913095050877"></p><blockquote><p>移码的符号表示和补码相反，1 表示正数，0 表示负数</p></blockquote><h3 id="浮点表示" tabindex="-1">浮点表示 <a class="header-anchor" href="#浮点表示" aria-label="Permalink to &quot;浮点表示&quot;">​</a></h3><p><img src="'+h+'" alt="image-20220913214001249"></p><p>其中,<code>0.110101</code> 和<code>0.00110101</code> 是正确在计算机存储的值, 当 为<code>0.1xxx</code> 使,这个数为规格化</p><p>阶码<code>(其本质是二进制)</code>计算方式为 ,小数点向左移动<code>2</code>为.则把<code>2</code>转换成二进制 <code>10</code></p><p>向右移动<code>2</code> 位.则为 把<code>2</code>转二进制,再添符号 为<code>-10</code></p>',50),_=[g];function u(b,q,x,f,k,P){return o(),e("div",null,_)}const S=a(m,[["render",u]]);export{C as __pageData,S as default};

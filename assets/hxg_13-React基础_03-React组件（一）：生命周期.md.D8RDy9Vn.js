import{_ as t,D as l,c as o,I as p,a5 as a,o as n}from"./chunks/framework.Cq-rJsvL.js";const M=JSON.parse('{"title":"03-React组件（一）：生命周期","description":"","frontmatter":{"title":"03-React组件（一）：生命周期","publish":true},"headers":[],"relativePath":"hxg/13-React基础/03-React组件（一）：生命周期.md","filePath":"hxg/13-React基础/03-React组件（一）：生命周期.md","lastUpdated":1725860495000}'),r={name:"hxg/13-React基础/03-React组件（一）：生命周期.md"},i=a('<h2 id="组件的生命周期" tabindex="-1">组件的生命周期 <a class="header-anchor" href="#组件的生命周期" aria-label="Permalink to &quot;组件的生命周期&quot;">​</a></h2><p>在组件创建、到加载到页面上运行、以及组件被销毁的过程中，总是伴随着各种各样的事件，这些在组件特定时期，触发的事件统称为组件的生命周期。</p><h2 id="生命周期的阶段" tabindex="-1">生命周期的阶段 <a class="header-anchor" href="#生命周期的阶段" aria-label="Permalink to &quot;生命周期的阶段&quot;">​</a></h2><p>组件生命周期分为三个阶段，下面分别来讲解。</p><h3 id="_1、组件创建阶段" tabindex="-1">1、组件创建阶段 <a class="header-anchor" href="#_1、组件创建阶段" aria-label="Permalink to &quot;1、组件创建阶段&quot;">​</a></h3><blockquote><p>组件创建阶段的生命周期函数，有一个显著的特点：创建阶段的生命周期函数，在组件的一辈子中，只执行一次。</p></blockquote><ul><li>getDefaultProps</li></ul><p>初始化 props 属性默认值。</p><ul><li>getInitialState</li></ul><p>初始化组件的私有数据。因为 state 是定义在组件的 constructor 构造器当中的，只要new 了 class类，必然会调用 constructor构造器。</p><ul><li>componentWillMount()</li></ul><p>组件将要被挂载。此时还没有开始渲染虚拟DOM。</p><p>在这个阶段，不能去操作DOM元素，但可以操作属性、状态、function。相当于 Vue 中的Create()函数。</p><ul><li>render()</li></ul><p>第一次开始渲染真正的虚拟DOM。当render执行完，内存中就有了完整的虚拟DOM了。</p><p>意思是，此时，虚拟DOM在内存中创建好了，但是还没有挂在到页面上。</p><p>在这个函数内部，不能去操作DOM元素，<strong>因为还没return之前，虚拟DOM还没有创建</strong>；当return执行完毕后，虚拟DOM就创建好了，但是还没有挂在到页面上。</p><ul><li><strong>componentDidMount()</strong></li></ul><p><strong>当组件（虚拟DOM）挂载到页面之后，会进入这个生命周期函数</strong>。</p><p>只要进入到这个生命周期函数，则必然说明，页面上已经有可见的DOM元素了。此时，组件已经显示到了页面上，state上的数据、内存中的虚拟DOM、以及浏览器中的页面，已经完全保持一致了。</p><p>当这个方法执行完，组件就进入都了 运行中 的状态。所以说，componentDidMount 是创建阶段的最后一个函数。</p><p>在这个函数中，我们可以放心的去 操作 页面上你需要使用的 DOM 元素了。如果我们想操作DOM元素，最早只能在 componentDidMount 中进行。相当于 Vue 中的 mounted() 函数</p><h3 id="_2、组件运行阶段" tabindex="-1">2、组件运行阶段 <a class="header-anchor" href="#_2、组件运行阶段" aria-label="Permalink to &quot;2、组件运行阶段&quot;">​</a></h3><blockquote><p>有一个显著的特点，根据组件的state和props的改变，有选择性的触发0次或多次。</p></blockquote><ul><li>componentWillReceiveProps()</li></ul><p>组件将要接收新属性。只有当父组件中，通过某些事件，重新修改了 传递给 子组件的 props 数据之后，才会触发这个钩子函数。</p><ul><li>shouldComponentUpdate()</li></ul><p>判断组件是否需要被更新。此时，组件尚未被更新，但是，state 和 props 肯定是最新的。</p><ul><li>componentWillUpdate()</li></ul><p>组件将要被更新。此时，组件还没有被更新，在进入到这个生命周期函数的时候，内存中的虚拟DOM还是旧的，页面上的 DOM 元素也是旧的。（也就是说，此时操作的是旧的 DOM元素）</p><ul><li>render</li></ul><p>此时，又要根据最新的 state 和 props，重新渲染一棵内存中的 虚拟DOM树。当 render 调用完毕，内存中的旧DOM树，已经被新DOM树替换了！此时，虚拟DOM树已经和组件的 state 保持一致了，都是最新的；但是页面还是旧的。</p><ul><li>componentDidUpdate</li></ul><p>此时，组件完成更新，页面被重新渲染。此时，state、虚拟DOM 和 页面已经完全保持同步。</p><h3 id="_3、组件销毁阶段" tabindex="-1">3、组件销毁阶段 <a class="header-anchor" href="#_3、组件销毁阶段" aria-label="Permalink to &quot;3、组件销毁阶段&quot;">​</a></h3><p>一辈子只执行一次。</p><ul><li>componentWillUnmount: 组件将要被卸载。此时组件还可以正常使用。</li></ul><p>React 生命周期的截图如下：</p><p>20190212_1745.jpg</p><p>生命周期对比：</p><ul><li><p><a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA" target="_blank" rel="noreferrer">vue中的生命周期图</a></p></li><li><p><a href="http://www.race604.com/react-native-component-lifecycle/" target="_blank" rel="noreferrer">React Native 中组件的生命周期</a></p></li></ul><h2 id="组件生命周期的执行顺序" tabindex="-1">组件生命周期的执行顺序 <a class="header-anchor" href="#组件生命周期的执行顺序" aria-label="Permalink to &quot;组件生命周期的执行顺序&quot;">​</a></h2><p><strong>1、Mounting</strong>：</p><ul><li><p>constructor()</p></li><li><p>componentWillMount()</p></li><li><p>render()</p></li><li><p>componentDidMount()</p></li></ul><p><strong>2、Updating</strong>：</p><ul><li><p>componentWillReceiveProps(nextProps)：接收父组件传递过来的属性</p></li><li><p>shouldComponentUpdate(nextProps, nextState)：一旦调用 setState，就会触发这个方法。方法默认 return true；如果 return false，后续的方法就不会走了。</p></li><li><p>componentWillUpdate(nextProps, nextState)</p></li><li><p>render()</p></li><li><p>componentDidUpdate(prevProps, prevState)</p></li></ul><p><strong>3、Unmounting</strong>：</p><ul><li>componentWillUnmount()</li></ul>',48);function c(u,s,d,_,h,m){const e=l("ArticleTopAd");return n(),o("div",null,[p(e),i])}const g=t(r,[["render",c]]);export{M as __pageData,g as default};

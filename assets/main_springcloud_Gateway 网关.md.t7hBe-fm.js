import{_ as e,c as t,o as i,a5 as a}from"./chunks/framework.DCwJlxxG.js";const m=JSON.parse('{"title":"springcloud 网关(待更新)","description":"","frontmatter":{"title":"springcloud 网关(待更新)","tags":"springcloud","categories":"springcloud","abbrlink":"2859d8b5"},"headers":[],"relativePath":"main/springcloud/Gateway 网关.md","filePath":"main/springcloud/Gateway 网关.md","lastUpdated":1662368311000}'),l={name:"main/springcloud/Gateway 网关.md"},p=a('<p>什么是网关</p><blockquote><p>API网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。</p></blockquote><p>网关应当具备以下功能：</p><ul><li><p>性能：API高可用，负载均衡，容错机制。</p></li><li><p>安全：权限身份认证、脱敏，流量清洗，后端签名（保证全链路可信调用）,黑名单（非法调用的限制）。</p></li><li><p>日志：日志记录（spainid,traceid）一旦涉及分布式，<a href="https://blog.csdn.net/weixin_45443931/article/details/108271413" target="_blank" rel="noreferrer">全链路跟踪</a>必不可少。</p></li><li><p>缓存：数据缓存。</p></li><li><p>监控：记录请求响应数据，api耗时分析，性能监控。</p></li><li><p>限流：流量控制，错峰流控，可以定义多种限流规则。</p></li><li><p>灰度：线上灰度部署，可以减小风险。</p></li><li><p>路由：动态路由规则。</p></li></ul>',4),r=[p];function o(n,s,c,_,d,u){return i(),t("div",null,r)}const P=e(l,[["render",o]]);export{m as __pageData,P as default};

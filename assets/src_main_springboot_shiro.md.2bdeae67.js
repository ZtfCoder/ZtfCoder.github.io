import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.1baa841b.js";const d=JSON.parse('{"title":"springboot基础入门-shiro","description":"","frontmatter":{"title":"springboot基础入门-shiro","tags":["java","springboot","安全框架"],"categories":"springboot","abbrlink":"e79b7cfd"},"headers":[],"relativePath":"src/main/springboot/shiro.md","filePath":"src/main/springboot/shiro.md","lastUpdated":1713749248000}'),p={name:"src/main/springboot/shiro.md"},e=l(`<h1 id="shiro" tabindex="-1">shiro <a class="header-anchor" href="#shiro" aria-label="Permalink to &quot;shiro&quot;">​</a></h1><p>Apache Shiro 是一个强大且易用的 Java 安全框架,执行身份验证、授权、密码和会话管理。使用 Shiro 的易于理解的 API,可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。</p><p>它有三个核心组件 <strong>Subject, SecurityManager 和 Realms.</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Subject：即“当前操作用户”。但是，在Shiro中，Subject这一概念并不仅仅指人，也可以是第三方进程、后台帐户（Daemon Account）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。</span></span>
<span class="line"><span style="color:#e1e4e8;">Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">SecurityManager：它是Shiro框架的核心，典型的Facade模式，Shiro通过SecurityManager来管理内部组件实例，并通过它来提供安全管理的各种服务。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">Realm： Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro会从应用配置的Realm中查找用户及其权限信息。</span></span>
<span class="line"><span style="color:#e1e4e8;">从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件等。如果系统默认的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Subject：即“当前操作用户”。但是，在Shiro中，Subject这一概念并不仅仅指人，也可以是第三方进程、后台帐户（Daemon Account）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。</span></span>
<span class="line"><span style="color:#24292e;">Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">SecurityManager：它是Shiro框架的核心，典型的Facade模式，Shiro通过SecurityManager来管理内部组件实例，并通过它来提供安全管理的各种服务。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Realm： Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro会从应用配置的Realm中查找用户及其权限信息。</span></span>
<span class="line"><span style="color:#24292e;">从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件等。如果系统默认的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="与-springboot-整合" tabindex="-1">与 springboot 整合 <a class="header-anchor" href="#与-springboot-整合" aria-label="Permalink to &quot;与 springboot 整合&quot;">​</a></h2><p>导入 xml</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.shiro&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;shiro-spring&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.7.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.shiro&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;shiro-spring&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.7.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="配置三大对象" tabindex="-1">配置三大对象 <a class="header-anchor" href="#配置三大对象" aria-label="Permalink to &quot;配置三大对象&quot;">​</a></h2><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShiroConf</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//ShiroFilterFactoryBean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ShiroFilterFactoryBean </span><span style="color:#B392F0;">getShiroFilterFactoryBean</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;securityManager&quot;</span><span style="color:#E1E4E8;">) DefaultWebSecurityManager </span><span style="color:#FFAB70;">securityManager</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        ShiroFilterFactoryBean bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShiroFilterFactoryBean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//设置安全管理器</span></span>
<span class="line"><span style="color:#E1E4E8;">        bean.</span><span style="color:#B392F0;">setSecurityManager</span><span style="color:#E1E4E8;">(securityManager);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//DefaultWebSecurityManager</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;securityManager&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DefaultWebSecurityManager </span><span style="color:#B392F0;">getDefaultWebSecurityManager</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;userRealm&quot;</span><span style="color:#E1E4E8;">) UserRealm </span><span style="color:#FFAB70;">userRealm</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//@Qualifier 默认使用的 @Bean 对象的方法名称,也可以在@Bean 中添加name 属性,自定义名称 ,这样,就可以从容器中获取 UserRealm 这个对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        DefaultWebSecurityManager securityManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultWebSecurityManager</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 关联  UserRealm</span></span>
<span class="line"><span style="color:#E1E4E8;">        securityManager.</span><span style="color:#B392F0;">setRealm</span><span style="color:#E1E4E8;">(userRealm);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> securityManager;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建realm 对象, 需要自定义</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserRealm </span><span style="color:#B392F0;">userRealm</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRealm</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShiroConf</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//ShiroFilterFactoryBean</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ShiroFilterFactoryBean </span><span style="color:#6F42C1;">getShiroFilterFactoryBean</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;securityManager&quot;</span><span style="color:#24292E;">) DefaultWebSecurityManager </span><span style="color:#E36209;">securityManager</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        ShiroFilterFactoryBean bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShiroFilterFactoryBean</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//设置安全管理器</span></span>
<span class="line"><span style="color:#24292E;">        bean.</span><span style="color:#6F42C1;">setSecurityManager</span><span style="color:#24292E;">(securityManager);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//DefaultWebSecurityManager</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;securityManager&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DefaultWebSecurityManager </span><span style="color:#6F42C1;">getDefaultWebSecurityManager</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userRealm&quot;</span><span style="color:#24292E;">) UserRealm </span><span style="color:#E36209;">userRealm</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//@Qualifier 默认使用的 @Bean 对象的方法名称,也可以在@Bean 中添加name 属性,自定义名称 ,这样,就可以从容器中获取 UserRealm 这个对象</span></span>
<span class="line"><span style="color:#24292E;">        DefaultWebSecurityManager securityManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultWebSecurityManager</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 关联  UserRealm</span></span>
<span class="line"><span style="color:#24292E;">        securityManager.</span><span style="color:#6F42C1;">setRealm</span><span style="color:#24292E;">(userRealm);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> securityManager;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建realm 对象, 需要自定义</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserRealm </span><span style="color:#6F42C1;">userRealm</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRealm</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>realm 对象是需要我们自己是定义的</p><p>写一个<code>UserRealm</code> 类继承 <code>AuthorizingRealm</code></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRealm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthorizingRealm</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 授权</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> AuthorizationInfo </span><span style="color:#B392F0;">doGetAuthorizationInfo</span><span style="color:#E1E4E8;">(PrincipalCollection </span><span style="color:#FFAB70;">principalCollection</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//认证</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> AuthenticationInfo </span><span style="color:#B392F0;">doGetAuthenticationInfo</span><span style="color:#E1E4E8;">(AuthenticationToken </span><span style="color:#FFAB70;">authenticationToken</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> AuthenticationException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRealm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthorizingRealm</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 授权</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> AuthorizationInfo </span><span style="color:#6F42C1;">doGetAuthorizationInfo</span><span style="color:#24292E;">(PrincipalCollection </span><span style="color:#E36209;">principalCollection</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//认证</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> AuthenticationInfo </span><span style="color:#6F42C1;">doGetAuthenticationInfo</span><span style="color:#24292E;">(AuthenticationToken </span><span style="color:#E36209;">authenticationToken</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> AuthenticationException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="添加过滤器" tabindex="-1">添加过滤器 <a class="header-anchor" href="#添加过滤器" aria-label="Permalink to &quot;添加过滤器&quot;">​</a></h2><p>shiro 内置含有过滤器</p><p>在安全管理器中进行配置,就可以了</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 添加内置过滤器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//anon:无须认证就可以访问</span></span>
<span class="line"><span style="color:#6A737D;">//authc:认证后才才能访问</span></span>
<span class="line"><span style="color:#6A737D;">//user:必须拥有 记住我 功能,才能访问</span></span>
<span class="line"><span style="color:#6A737D;">//role:拥有某个角色才能访问</span></span>
<span class="line"><span style="color:#6A737D;">//perms:必须拥有某个资源的权限才能访问  使用方法是perms[字符串]</span></span>
<span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/add&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;authc&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/update&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;authc&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 这样设置了,只有用户进行了认证后才能进行访问 /add /update</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//最后把过滤器添加进管理器就行了</span></span>
<span class="line"><span style="color:#E1E4E8;">bean.</span><span style="color:#B392F0;">setFilterChainDefinitionMap</span><span style="color:#E1E4E8;">(map);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 添加内置过滤器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//anon:无须认证就可以访问</span></span>
<span class="line"><span style="color:#6A737D;">//authc:认证后才才能访问</span></span>
<span class="line"><span style="color:#6A737D;">//user:必须拥有 记住我 功能,才能访问</span></span>
<span class="line"><span style="color:#6A737D;">//role:拥有某个角色才能访问</span></span>
<span class="line"><span style="color:#6A737D;">//perms:必须拥有某个资源的权限才能访问  使用方法是perms[字符串]</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/add&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;authc&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/update&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;authc&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 这样设置了,只有用户进行了认证后才能进行访问 /add /update</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//最后把过滤器添加进管理器就行了</span></span>
<span class="line"><span style="color:#24292E;">bean.</span><span style="color:#6F42C1;">setFilterChainDefinitionMap</span><span style="color:#24292E;">(map);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="定制登录" tabindex="-1">定制登录 <a class="header-anchor" href="#定制登录" aria-label="Permalink to &quot;定制登录&quot;">​</a></h2><p>也是在安全管理器中进行配置</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//设置登录页</span></span>
<span class="line"><span style="color:#E1E4E8;">bean.</span><span style="color:#B392F0;">setLoginUrl</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/toLogin&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//设置登录页</span></span>
<span class="line"><span style="color:#24292E;">bean.</span><span style="color:#6F42C1;">setLoginUrl</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/toLogin&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在 Controller 层进行逻辑调用 ,底层已经把登录的逻辑写好了,我们只需要在 认证的方法中进行方法的调用就好了,他会自己抛出响应的逻辑异常</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取当前用户</span></span>
<span class="line"><span style="color:#E1E4E8;">Subject subject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SecurityUtils.</span><span style="color:#B392F0;">getSubject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 封装用户名和密码</span></span>
<span class="line"><span style="color:#E1E4E8;">UsernamePasswordToken token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UsernamePasswordToken</span><span style="color:#E1E4E8;">(account, password);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 登录 ,调用了登录方法,就会调用 UserRealm对象中的认证的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    subject.</span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(token);  </span><span style="color:#6A737D;">//如果没有异常 则登录成功</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (UnknownAccountException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用户不存在</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    model.</span><span style="color:#B392F0;">addAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;msg&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;用户名错误&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;login&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IncorrectCredentialsException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 密码错误</span></span>
<span class="line"><span style="color:#E1E4E8;">    model.</span><span style="color:#B392F0;">addAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;msg&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;密码错误&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;login&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;index&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取当前用户</span></span>
<span class="line"><span style="color:#24292E;">Subject subject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SecurityUtils.</span><span style="color:#6F42C1;">getSubject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 封装用户名和密码</span></span>
<span class="line"><span style="color:#24292E;">UsernamePasswordToken token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UsernamePasswordToken</span><span style="color:#24292E;">(account, password);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 登录 ,调用了登录方法,就会调用 UserRealm对象中的认证的方法</span></span>
<span class="line"><span style="color:#24292E;">    subject.</span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(token);  </span><span style="color:#6A737D;">//如果没有异常 则登录成功</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (UnknownAccountException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用户不存在</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    model.</span><span style="color:#6F42C1;">addAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;msg&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;用户名错误&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;login&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IncorrectCredentialsException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 密码错误</span></span>
<span class="line"><span style="color:#24292E;">    model.</span><span style="color:#6F42C1;">addAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;msg&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;密码错误&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;login&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;index&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//认证</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> AuthenticationInfo </span><span style="color:#B392F0;">doGetAuthenticationInfo</span><span style="color:#E1E4E8;">(AuthenticationToken authenticationToken) throws AuthenticationException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 转换成可操作的token 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        UsernamePasswordToken token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (UsernamePasswordToken) authenticationToken;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        String account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String pwd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">token.</span><span style="color:#B392F0;">getUsername</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(account)){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//UnknownAccountException  返回null 的话,抛出 用户名不存在异常</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 密码认证</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleAuthenticationInfo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,pwd,</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//认证</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> AuthenticationInfo </span><span style="color:#6F42C1;">doGetAuthenticationInfo</span><span style="color:#24292E;">(AuthenticationToken authenticationToken) throws AuthenticationException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 转换成可操作的token 对象</span></span>
<span class="line"><span style="color:#24292E;">        UsernamePasswordToken token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (UsernamePasswordToken) authenticationToken;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        String account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        String pwd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">token.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(account)){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//UnknownAccountException  返回null 的话,抛出 用户名不存在异常</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 密码认证</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleAuthenticationInfo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,pwd,</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="设置无权限访问界面" tabindex="-1">设置无权限访问界面 <a class="header-anchor" href="#设置无权限访问界面" aria-label="Permalink to &quot;设置无权限访问界面&quot;">​</a></h2><p>也是在安全管理器中进行设置,开启就可以了</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 设置无权限访问的界面</span></span>
<span class="line"><span style="color:#E1E4E8;">bean.</span><span style="color:#B392F0;">setUnauthorizedUrl</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;noAlow&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 设置无权限访问的界面</span></span>
<span class="line"><span style="color:#24292E;">bean.</span><span style="color:#6F42C1;">setUnauthorizedUrl</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;noAlow&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,25),o=[e];function r(c,t,i,E,y,u){return n(),a("div",null,o)}const m=s(p,[["render",r]]);export{d as __pageData,m as default};

import{_ as s,c as l,j as e,a,o as i}from"./chunks/framework.sGs2IBkb.js";const n="/assets/image-20221015232622738.pUozfqQe.png",p="/assets/image-20221015232800275.CHG_F0lf.png",o="/assets/image-20221015232956359.Bj98HROG.png",m="/assets/BLPYY1O9P5OOSR4IQZ7_OU9.DBtXwLWY.png",x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"myUtils/前端接口代码生成/3.apifox 文档(推荐).md","filePath":"myUtils/前端接口代码生成/3.apifox 文档(推荐).md","lastUpdated":1730544720000}'),r={name:"myUtils/前端接口代码生成/3.apifox 文档(推荐).md"};function c(_,t,g,d,f,u){return i(),l("div",null,t[0]||(t[0]=[e("p",null,"使用 knife4j 生成 出来的类型并不好用,而且随着泛型增加,会生成一大堆重复的",-1),e("p",null,[a("并且配置 Java 配置起来比较繁琐,且复杂,我推荐使用 "),e("code",null,"apifox "),a("工具")],-1),e("p",null,"工具不就不介绍如何使用的,重点放在代码生成生成",-1),e("p",null,[e("img",{src:n,alt:"image-20221015232622738",onclick:"previewImage(this)"})],-1),e("p",null,"创建一个接口,设置接口参数,这里可以很方便的设置参数是否是必须的,",-1),e("p",null,"然后设置接口返回值",-1),e("p",null,[e("img",{src:p,alt:"image-20221015232800275",onclick:"previewImage(this)"})],-1),e("p",null,"这里有个注意的地方,返回值 code 这种,建议不用使用实体类关联,直接写返回值名称,类型这些即可,但是在 data 类型的时候,最好选择 模型关联 这样方便生成出来的代码有通用的实体类型",-1),e("p",null,[e("img",{src:o,alt:"image-20221015232956359",onclick:"previewImage(this)"})],-1),e("p",null,"比如这样,只有这个 data 是关联了实体类型的,",-1),e("p",null,[e("img",{src:m,alt:"img",onclick:"previewImage(this)"})],-1),e("p",null,"然后进行上述操作,导出我们的 openapi json 文件",-1),e("p",null,[a("接着就可以进行 文章 2 中的前端搭建 内容 "),e("a",{href:"./2.knife4j 文档.html#前端代码生成"},"2.knife4j 文档.md")],-1)]))}const h=s(r,[["render",c]]);export{x as __pageData,h as default};

import{_ as t,o as a,c as e,Q as p}from"./chunks/framework.1baa841b.js";const s="/assets/image-20221015232622738.ed27ee37.png",_="/assets/image-20221015232800275.55034cc8.png",i="/assets/image-20221015232956359.f678e30c.png",o="/assets/BLPYY1O9P5OOSR4IQZ7_OU9.c62fa84a.png",S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"myUtils/前端接口代码生成/3.apifox 文档(推荐).md","filePath":"myUtils/前端接口代码生成/3.apifox 文档(推荐).md","lastUpdated":1713749248000}'),c={name:"myUtils/前端接口代码生成/3.apifox 文档(推荐).md"},n=p('<p>使用 knife4j 生成 出来的类型并不好用,而且随着泛型增加,会生成一大堆重复的</p><p>并且配置 Java 配置起来比较繁琐,且复杂,我推荐使用 <code>apifox </code>工具</p><p>工具不就不介绍如何使用的,重点放在代码生成生成</p><p><img src="'+s+'" alt="image-20221015232622738"></p><p>创建一个接口,设置接口参数,这里可以很方便的设置参数是否是必须的,</p><p>然后设置接口返回值</p><p><img src="'+_+'" alt="image-20221015232800275"></p><p>这里有个注意的地方,返回值 code 这种,建议不用使用实体类关联,直接写返回值名称,类型这些即可,但是在 data 类型的时候,最好选择 模型关联 这样方便生成出来的代码有通用的实体类型</p><p><img src="'+i+'" alt="image-20221015232956359"></p><p>比如这样,只有这个 data 是关联了实体类型的,</p><p><img src="'+o+'" alt="img"></p><p>然后进行上述操作,导出我们的 openapi json 文件</p><p>接着就可以进行 文章 2 中的前端搭建 内容 <a href="./2.knife4j 文档.html#前端代码生成">2.knife4j 文档.md</a></p>',13),m=[n];function r(d,f,l,g,h,x){return a(),e("div",null,m)}const T=t(c,[["render",r]]);export{S as __pageData,T as default};

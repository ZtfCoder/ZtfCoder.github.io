import{_ as s,c as l,G as p,a2 as a,j as e,B as n,o as r}from"./chunks/framework.sGs2IBkb.js";const b=JSON.parse('{"title":"02-浏览器渲染机制","description":"","frontmatter":{"title":"02-浏览器渲染机制","publish":true},"headers":[],"relativePath":"hxg/14-前端性能优化/02-浏览器渲染机制.md","filePath":"hxg/14-前端性能优化/02-浏览器渲染机制.md","lastUpdated":1725860495000}'),o={name:"hxg/14-前端性能优化/02-浏览器渲染机制.md"};function h(d,t,g,c,u,k){const i=n("ArticleTopAd");return r(),l("div",null,[p(i),t[0]||(t[0]=a('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><strong>渲染机制</strong>包括的内容：</p><ul><li><p>什么是DOCTYPE及作用</p></li><li><p>浏览器渲染过程。面试经常会问：在浏览器中输入url，发生了哪些事情。其中有一部就是浏览器的渲染过程。</p></li><li><p>Reflow：重排。面试官问完了渲染机制，一般会紧接着问重排Reflow，你可千万别说你没听过。</p></li><li><p>Repaint：重绘</p></li><li><p>Layout：布局。这里的Layout指的是浏览器的Layout。</p></li></ul><h2 id="什么是doctype及作用" tabindex="-1">什么是DOCTYPE及作用 <a class="header-anchor" href="#什么是doctype及作用" aria-label="Permalink to &quot;什么是DOCTYPE及作用&quot;">​</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p><strong>DTD</strong>（Document Type Definition）：文档类型定义。</p><p>是一系列的语法规则，用来定义XML或者(X)HTML文件类型。<strong>浏览器会使用DTD来判断文本类型</strong>，决定使用何种协议来解析，以及切换浏览器模式。（说白了就是：DTD就是告诉浏览器，我是什么文档类型，你要用什么协议来解析我）</p><p><strong>DOCTYPE</strong>：用来声明DTD规范。</p><p>一个主要的用途便是文件的合法性验证。如果文件代码不合法，那么浏览器解析时便会出现一些差错。（说白了，DOCTYPE就是用来声明DTD的）</p><h3 id="常见的doctype声明有几种" tabindex="-1">常见的DOCTYPE声明有几种 <a class="header-anchor" href="#常见的doctype声明有几种" aria-label="Permalink to &quot;常见的DOCTYPE声明有几种&quot;">​</a></h3><blockquote><p>面试官紧接着会问，常见的 DOCTYPE 有哪些，以及 HTML5 的 DOCTYPE 怎么写。</p></blockquote><p>1、<strong>HTML 4.01 Strict</strong>：（严格的）</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTML</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PUBLIC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-//W3C//DTD HTML 4.01//EN&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>PS：该DTD包含所有的HTML元素和属性，但不包括展示性的和弃用的元素（比如 font、u下划线等，这些是被废弃了的）。</p><p>2、<strong>HTML 4.01 Transitional</strong>：（传统的）</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTML</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PUBLIC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>PS：该DTD包含所有的HTML元素和属性，但包括展示性的和弃用的元素（比如 font、u下划线等）。</p><p>3、HTML 5：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>总结：</strong></p><p>面试时，不会让你写出 HTML 4.01的写法，因为大家都记不住。但是要记住 HTML 5 的写法，别看它简单，知道的人还真不多。</p><p>面试时，可以这样回答： HTML 4.01 中有两种写法，一种是严格的，一种是传统的；并且答出二者的区别。 HTML 5的写法是<code>&lt;!DOCTYPE html&gt;</code>。</p><h2 id="浏览器的渲染过程" tabindex="-1">浏览器的渲染过程 <a class="header-anchor" href="#浏览器的渲染过程" aria-label="Permalink to &quot;浏览器的渲染过程&quot;">​</a></h2><h3 id="渲染树" tabindex="-1">渲染树 <a class="header-anchor" href="#渲染树" aria-label="Permalink to &quot;渲染树&quot;">​</a></h3>',24)),t[1]||(t[1]=e("p",null,[e("img",{src:"http://img.smyhvae.com/20210118-2005.png",alt:"",onclick:"previewImage(this)"})],-1)),t[2]||(t[2]=a('<blockquote><p>上方图片的来源：<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn" target="_blank" rel="noreferrer">Google 官方 | 渲染树构建、布局及绘制</a></p></blockquote><p><strong>渲染树</strong>包含了网页中有哪些节点、节点的从属关系、以及节点的CSS样式（大小、颜色等）。</p><p>浏览器下载完html文档之后，第一步是先将其解析成文本。而html标签是由一对一对的尖括号表述的，可以被浏览器解析为有含义的标记。这些标记被翻译成节点对象，存放到链型数据结构中。这些节点被称之为<strong>DOM对象</strong>，这个链型数据结构就是<strong>渲染树</strong>。</p><h3 id="渲染过程-重要" tabindex="-1">渲染过程（重要） <a class="header-anchor" href="#渲染过程-重要" aria-label="Permalink to &quot;渲染过程（重要）&quot;">​</a></h3><p>浏览器的渲染过程非常复杂，面试时找重点说就行，不然太耗时间。如何快速简洁地描述清楚，是关键。来看看下面这张图。</p>',5)),t[3]||(t[3]=e("p",null,[e("img",{src:"https://img.smyhvae.com/20180310_1257.png",alt:"",onclick:"previewImage(this)"})],-1)),t[4]||(t[4]=a('<p>渲染过程中，涉及到以下几个概念：</p><ul><li><p>DOM树（DOM Tree）：浏览器将HTML标签解析成树形的数据结构。DOM树包含了有哪些节点，以及节点之间的从属关系（嵌套关系）。</p></li><li><p>CSSOM（CSS Rule Tree）：浏览器将CSS解析成树形的数据结构。CSSOM包含了节点的CSS样式（大小、颜色等）。</p></li><li><p>渲染树（Render Tree）: DOM 树与 CSSOM 树<strong>合并</strong>后形成渲染树。渲染树只包含渲染网页所需的节点（但并不知道位置）。</p></li><li><p>布局（Layout）: 计算出每个节点在屏幕中的<strong>位置和大小</strong>。</p></li><li><p>绘制（Painting）：按照算出来的规则，通过显卡，把内容画出来。</p></li><li><p>composite：合成。浏览器在绘制的时候，一开始不会把所有的内容都画在同一层上。需要把这些内容画在不同的曾上，最终合并到一起，并显示在屏幕上。</p></li></ul><p>参考链接：</p><ul><li><a href="http://www.cnblogs.com/slly/p/6640761.html" target="_blank" rel="noreferrer">浏览器渲染原理及流程</a></li></ul><h3 id="关键渲染路径" tabindex="-1">关键渲染路径 <a class="header-anchor" href="#关键渲染路径" aria-label="Permalink to &quot;关键渲染路径&quot;">​</a></h3><p>说到渲染，就不得不提到“关键渲染路径”，它描述的是渲染从触发到绘制的过程。浏览器渲染经历了五个阶段：</p><blockquote><p>JavaScript/CSS --&gt; Style --&gt; Layout --&gt; Paint --&gt; Composite</p></blockquote>',7)),t[5]||(t[5]=e("p",null,[e("img",{src:"http://img.smyhvae.com/20210118-1950.jpg",alt:"",onclick:"previewImage(this)"})],-1)),t[6]||(t[6]=a('<blockquote><p>上方图片的来源：<a href="https://developers.google.com/web/fundamentals/performance/rendering" target="_blank" rel="noreferrer">https://developers.google.com/web/fundamentals/performance/rendering</a></p></blockquote><p>关键渲染路径描述的是渲染从触发到绘制的全过程，一共经历了五个阶段：</p><p>（1）<strong>触发视觉的变化：<strong>通过JS、CSS代码来</strong>触发</strong>页面上的视觉变化。比如通过 jQuery添加节点、通过CSS添加动画，都可以触发视觉上的变化。</p><p>（2）Style：浏览器对样式进行计算。匹配选择器，计算哪些CSS受到了影响。</p><p>（3）layout：同上一段。</p><p>（4）painting：同上一段。</p><p>（5）conmposite：同上一段。</p><p>理论上，上面的五个步骤都是必须要经历的。布局和绘制是关键渲染路径中，最重要、开销最高的两个步骤。</p><p>但是，有些样式并不会影响布局，也不会影响绘制。所以，浏览器对这方面的性能进行了优化，并不一定要经历布局和绘制这两个过程。这就需要我们先了解一下「重排」和「重绘」这两个概念。详见下一段。</p><h2 id="布局-回流-重排" tabindex="-1">布局/回流/重排 <a class="header-anchor" href="#布局-回流-重排" aria-label="Permalink to &quot;布局/回流/重排&quot;">​</a></h2><h3 id="定义-1" tabindex="-1">定义 <a class="header-anchor" href="#定义-1" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>布局 layout：</p><p>渲染对象在创建完成并添加到渲染树时，是将DOM节点和它对应的样式结合起来，并不包含位置和大小信息。</p><p>我们还需要通过 <code>Layout</code> 布局阶段，来计算它们在设备视口(viewport)内的确切位置和大小，计算这些值的过程称为<code>回流</code>、<code>布局</code>或<code>重排（Reflow）</code>。</p><p>参考链接：</p><ul><li><p><a href="https://www.cnblogs.com/xiahj/p/11777786.html" target="_blank" rel="noreferrer">从浏览器渲染原理，浅谈回流重绘与性能优化</a></p></li><li><p><a href="https://github.com/chenjigeng/blog/issues/4" target="_blank" rel="noreferrer">你真的了解回流和重绘吗</a></p></li></ul><h3 id="什么时候会触发布局" tabindex="-1">什么时候会触发布局 <a class="header-anchor" href="#什么时候会触发布局" aria-label="Permalink to &quot;什么时候会触发布局&quot;">​</a></h3><p>DOM元素的<strong>大小</strong>和<strong>位置</strong>发生变化的时候，会触发布局。</p><ul><li><p>增加、删除DOM元素</p></li><li><p>display: none</p></li><li><p>移动元素位置，或是增加动画</p></li><li><p>修改CSS样式时（宽高、display 为none等，都是通过css样式来修改的）</p></li><li><p>offsetLeft、scrollTop、clientWidth</p></li><li><p>修改浏览器窗口大小时（即Resize窗口，移动端没有这个问题），或是滚动的时候，<strong>有可能</strong>会触发（具体要看浏览器的规则）。</p></li><li><p>修改网页的默认字体时（这个很消耗性能）。</p></li></ul><p><strong>面试总结：</strong></p><p>首先要答出 Reflow 定义；其次，什么时候触发，至少要答出两条。更进一步，面试官可能还会问你<strong>怎么避免reflow</strong>，这个可以自己去查查。</p><h2 id="绘制-重绘" tabindex="-1">绘制/重绘 <a class="header-anchor" href="#绘制-重绘" aria-label="Permalink to &quot;绘制/重绘&quot;">​</a></h2><h3 id="定义-2" tabindex="-1">定义 <a class="header-anchor" href="#定义-2" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p><strong>绘制 paint</strong>：当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来后，浏览器便把这些元素都按照各自的特性绘制一遍，于是页面的内容出现了，这个过程也称之为 Repaint（重绘制）。</p><p>说白了，页面要呈现的内容，统统画在屏幕上，这就叫 Repaint。</p><h3 id="什么时候触发绘制" tabindex="-1">什么时候触发绘制 <a class="header-anchor" href="#什么时候触发绘制" aria-label="Permalink to &quot;什么时候触发绘制&quot;">​</a></h3><ul><li><p>DOM改动</p></li><li><p>CSS改动</p></li></ul><p>其实，就是判断当视觉上是否发生变化（无论这个变化是通过DOM改动还是CSS改动）。只要页面显示的内容不一样了，肯定要 Repaint。</p><p><strong>面试总结：</strong></p><p>面试官经常会问：“如何<strong>尽量减少</strong>Repaint的频率？”</p><p>注意， reflow是问“怎么避免”，repaint是问“怎么减少”。Repaint是无法避免的，否则就成了静态页面了。</p><p><strong>答案</strong>：</p><p>（1）如果需要创建多个DOM节点，可以使用<strong>DocumentFragment</strong>创建完，然后一次性地加入document。（加一个节点，就repaint一次，不太好）</p><p>（2）将元素的display设置为”none”，完成修改后再把display修改为原来的值。</p><p>参考链接：<a href="http://blog.csdn.net/liaozhongping/article/details/47057889" target="_blank" rel="noreferrer">如何减少浏览器repaint和reflow ?</a></p>',35))])}const f=s(o,[["render",h]]);export{b as __pageData,f as default};
